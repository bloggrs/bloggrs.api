// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

model ModelName {
  id Int @id @default(autoincrement())}

model Blog {
  id                 Int                @id @default(autoincrement())
  name               String
  description        String
  logo_url           String
  userId             Int                @unique
  user               User               @relation(fields: [userId], references: [id])
  blogCategoryId     Int                @unique
  blogCategory       BlogCategory       @relation(fields: [blogCategoryId], references: [id])
  referrals          Referral[]
  categories         Category[]
  blogContacts       BlogContact[]
  posts              Post[]
  pages              Page[]
  blogPostCategories BlogPostCategory[]
  secretKeys          SecretKey[]
  teamMembers         TeamMember[]}

model BlogCategory {
  id    Int    @id @default(autoincrement())
  name  String
  blogs Blog[]}

model BlogContact {
  id         Int    @id @default(autoincrement())
  first_name String
  last_name  String
  email      String
  content    String
  blogId     Int    @unique
  blog       Blog   @relation(fields: [blogId], references: [id])}

model BlogPostCategory {
  id         Int      @id @default(autoincrement())
  blogId     Int      @unique
  blog       Blog     @relation(fields: [blogId], references: [id])
  categoryId Int      @unique
  category   Category @relation(fields: [categoryId], references: [id])}

model Category {
  id                 Int                @id @default(autoincrement())
  name               String
  posts              Post[]
  blogs              Blog[]
  postCategories     PostCategory[]
  blogPostCategories BlogPostCategory[]}

model Page {
  id     Int    @id @default(autoincrement())
  name   String
  slug   String
  blogId Int    @unique
  blog   Blog   @relation(fields: [blogId], references: [id])
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])}

enum PostStatus {
  DRAFT
  PUBLISHED
  UNPUBLISHED}

model Post {
  id             Int            @id @default(autoincrement())
  title          String
  slug           String
  html_content   String
  status         PostStatus
  blogId         Int            @unique
  blog           Blog           @relation(fields: [blogId], references: [id])
  userId         Int            @unique
  user           User           @relation(fields: [userId], references: [id])
  postCategories PostCategory[]
  categories     Category[]
  postComments   PostComment[]
  postLikes      PostLike[]}

model PostCategory {
  id         Int      @id @default(autoincrement())
  postId     Int      @unique
  post       Post     @relation(fields: [postId], references: [id])
  categoryId Int      @unique
  category   Category @relation(fields: [categoryId], references: [id])}

model PostComment {
  id     Int    @id @default(autoincrement())
  conte  String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
  postId Int    @unique
  post   Post   @relation(fields: [postId], references: [id])}

model PostLike {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
  postId Int  @unique
  post   Post @relation(fields: [postId], references: [id])}

model Referral {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
  blogId Int  @unique
  blog   Blog @relation(fields: [blogId], references: [id])}

model SecretKey {
  id     String @id @default(uuid())
  blogId Int    @unique
  blog   Blog   @relation(fields: [blogId], references: [id])}

model TeamMember {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
  blogId Int  @unique
  blog   Blog @relation(fields: [blogId], references: [id])}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  first_name   String
  last_name    String
  isGuest      Boolean       @default(false)
  referrals    Referral[]
  blogs        Blog[]
  postComments PostComment[]
  postLikes    PostLike[]
  pages         Page[]
  posts         Post[]
  teamMembers   TeamMember[]}
